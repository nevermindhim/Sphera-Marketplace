{
  "address": "0xF7a4f46dc895144b1a4Efb7a5789F76F35dD02Ab",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "acceptedBidAmount",
          "type": "uint256"
        }
      ],
      "name": "AcceptBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DeleteBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ListNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UnlistNFT",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serialNumber",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_acceptedBidAmount",
          "type": "uint256"
        }
      ],
      "name": "acceptBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serialNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "addBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "buyersBidsIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sentIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyersTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sphs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeTaxFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serialNumber",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "deleteBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "page",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "pageSize",
          "type": "uint64"
        }
      ],
      "name": "getReceivedBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "serialNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTMarketplace.Bid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "page",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "pageSize",
          "type": "uint64"
        }
      ],
      "name": "getSentBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "serialNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTMarketplace.Bid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serialNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "getTokenBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "serialNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTMarketplace.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serialNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "page",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "pageSize",
          "type": "uint64"
        }
      ],
      "name": "getTokenBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "serialNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTMarketplace.Bid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_serialNumbers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "name": "listNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nfts",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "receivedBids",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "registerSpheraToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sentBids",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryWalletAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spheraTokenAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenBids",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "serialNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serialNumber",
          "type": "uint256"
        }
      ],
      "name": "unlistNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe5f8ed999e09a8fc54fdf70dd7c4747e2abfa6d847bfc0f45fc148a0451d9991",
  "receipt": {
    "to": null,
    "from": "0x43b1DB0EC2167C8811cA0216A35B3bEfc339689c",
    "contractAddress": "0xF7a4f46dc895144b1a4Efb7a5789F76F35dD02Ab",
    "transactionIndex": 86,
    "gasUsed": "3315376",
    "logsBloom": "0x
    "blockHash": "0x89aacd9e516a2bf88492705270408ad8340b0d7d412ddf481e8fbdb968288e29",
    "transactionHash": "0xe5f8ed999e09a8fc54fdf70dd7c4747e2abfa6d847bfc0f45fc148a0451d9991",
    "logs": [],
    "blockNumber": 5854794,
    "cumulativeGasUsed": "21070957",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4767ddf10785af1c05c2abb3f9e62044",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptedBidAmount\",\"type\":\"uint256\"}],\"name\":\"AcceptBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeleteBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UnlistNFT\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acceptedBidAmount\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"buyersBidsIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyersTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sphs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"deleteBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"page\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pageSize\",\"type\":\"uint64\"}],\"name\":\"getReceivedBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketplace.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"page\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pageSize\",\"type\":\"uint64\"}],\"name\":\"getSentBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketplace.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getTokenBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketplace.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"page\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pageSize\",\"type\":\"uint64\"}],\"name\":\"getTokenBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketplace.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_serialNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"listNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivedBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"registerSpheraToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sentBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spheraTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"}],\"name\":\"unlistNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketplace.sol\":\"NFTMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x93d24eea4e6ddbed53ef161567ae62bfd0c3aebb7b48f37e4dbeb7a937108866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/NFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\n// import \\\"./HederaTokenService.sol\\\";\\r\\n// import \\\"./IHederaTokenService.sol\\\";\\r\\n// import \\\"./HederaResponseCodes.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\r\\n\\r\\ncontract NFTMarketplace is ERC2981 {\\r\\n    // Error Codes\\r\\n    enum MarketResponseCodes {\\r\\n        SUCCESS,\\r\\n        CONTRACT_DOES_NOT_HAVE_ALLOWANCE,\\r\\n        NOT_THE_CONTRACT_OWNER,\\r\\n        BID_NOT_EXISTS,\\r\\n        NOT_ENOUGH_MONEY,\\r\\n        TOKEN_ASSOCIATION_FAILED,\\r\\n        WRONG_PAGINATION,\\r\\n        WRONG_FUNCTION_INPUTS,\\r\\n        NFT_ALREADY_LISTED,\\r\\n        NO_PERMISSION,\\r\\n        ALLOWANCE_REQUIRED,\\r\\n        NFT_INFO_FETCH_FAILED,\\r\\n        NFT_NOT_LISTED,\\r\\n        NFT_TRANSFER_FAILED,\\r\\n        SPH_TRANSFER_FAILED\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    //////////// EVENTS /////////////\\r\\n    /////////////////////////////////\\r\\n    event ListNFT(address indexed token, uint indexed serialNumber, address indexed _owner, uint price);\\r\\n    event UnlistNFT(address indexed token, uint indexed serialNumber, address indexed owner, uint price);\\r\\n    event AddBid(address indexed token, uint serialNumber, address indexed owner, address indexed buyer, uint amount);\\r\\n    event DeleteBid(address indexed token, uint indexed serialNumber, address indexed owner, uint amount);\\r\\n    event AcceptBid(address indexed token, uint serialNumber, address indexed owner, address indexed buyer, uint acceptedBidAmount);\\r\\n\\r\\n    /////////////////////////////////\\r\\n    ///////// STRUCTURES ////////////\\r\\n    /////////////////////////////////\\r\\n    struct Bid {\\r\\n        address payable owner;\\r\\n        uint amount;\\r\\n        address token;\\r\\n        uint serialNumber;\\r\\n    }\\r\\n\\r\\n    struct BidIndexes {\\r\\n        uint tokenIndex;\\r\\n        uint receivedIndex;\\r\\n        uint sentIndex;\\r\\n        bool isSet;\\r\\n    }\\r\\n\\r\\n    struct BuyerTokens {\\r\\n        // total sphs in the contract\\r\\n        uint sphs;\\r\\n    }\\r\\n\\r\\n    // Struct to hold NFT details\\r\\n    struct NFT {\\r\\n        address payable owner;\\r\\n        uint price;\\r\\n        address token;\\r\\n        uint serialNumber;\\r\\n        bool isListed;\\r\\n    }\\r\\n\\r\\n    struct NonFungibleTokenInfo {\\r\\n        address owner;\\r\\n        address spender;\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    ////////// VARIABLES ////////////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    // Mapping to store bids for each buyer\\r\\n    mapping(string => Bid[]) public tokenBids;\\r\\n    // Store bids maps for fast getting\\r\\n    mapping(address => Bid[]) public receivedBids;\\r\\n    mapping(address => Bid[]) public sentBids;\\r\\n\\r\\n    mapping(address => mapping(string => BidIndexes)) public buyersBidsIndexes;\\r\\n    mapping(address => BuyerTokens) public buyersTokens;\\r\\n    // Mapping from NFT to its details\\r\\n    // Key format: \\\"EVM_TOKEN_ID/SERIAL_NUMBER\\\"\\r\\n    mapping(string => NFT) public nfts;\\r\\n    address internal contractOwner;\\r\\n\\r\\n    IERC20 public spheraTokenAddress;\\r\\n    address treasuryWalletAddress;\\r\\n    uint public taxFee = 25; //divided by 1000\\r\\n\\r\\n    modifier onlyContractOwner() {\\r\\n        require(msg.sender == contractOwner, \\\"Not the contract owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        contractOwner = msg.sender;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    /////////////////////////////////\\r\\n    //////////// INTERNAL ///////////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function removeBidInfo(string memory nftId, address _buyer) internal {\\r\\n        address nftOwner = nfts[nftId].owner;\\r\\n        require(buyersBidsIndexes[_buyer][nftId].isSet, \\\"There is no bid, you can't remove it\\\");\\r\\n\\r\\n        BidIndexes memory indexes = buyersBidsIndexes[_buyer][nftId];\\r\\n\\r\\n        // Iterate through each bid type (token, sent, received)\\r\\n        for (uint8 bidType = 0; bidType < 3; bidType++) {\\r\\n            Bid[] storage bidArray;\\r\\n            uint bidIndex;\\r\\n\\r\\n            // Determine the bid array and index based on bid type\\r\\n            if (bidType == 0) {\\r\\n                bidArray = tokenBids[nftId];\\r\\n                bidIndex = indexes.tokenIndex;\\r\\n            } else if (bidType == 1) {\\r\\n                bidArray = sentBids[_buyer];\\r\\n                bidIndex = indexes.sentIndex;\\r\\n            } else {\\r\\n                bidArray = receivedBids[nftOwner];\\r\\n                bidIndex = indexes.receivedIndex;\\r\\n            }\\r\\n\\r\\n            // Move the last element to the position of the element to be removed\\r\\n            uint lastIndex = bidArray.length - 1;\\r\\n            Bid memory bidToMove = bidArray[lastIndex];\\r\\n            bidArray[bidIndex] = bidToMove;\\r\\n\\r\\n            // Remove the last element by reducing the length of the array\\r\\n            bidArray.pop();\\r\\n\\r\\n            // Determine the bid array and index based on bid type\\r\\n            if (bidType == 0) {\\r\\n                buyersBidsIndexes[bidToMove.owner][nftId].tokenIndex = bidIndex;\\r\\n            } else if (bidType == 1) {\\r\\n                buyersBidsIndexes[bidToMove.owner][nftId].sentIndex = bidIndex;\\r\\n            } else {\\r\\n                buyersBidsIndexes[bidToMove.owner][nftId].receivedIndex = bidIndex;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /////////////////////\\r\\n        /////// FINAL ///////\\r\\n        /////////////////////\\r\\n\\r\\n        // Remove pointer for removed bid\\r\\n        buyersBidsIndexes[_buyer][nftId].isSet = false;\\r\\n    }\\r\\n\\r\\n    function registerSpheraToken(address _tokenAddress) public onlyContractOwner {\\r\\n        spheraTokenAddress = IERC20(_tokenAddress);\\r\\n    }\\r\\n\\r\\n    function setTreasuryWalletAddress(address _walletAddress) public onlyContractOwner {\\r\\n        treasuryWalletAddress = _walletAddress;\\r\\n    }\\r\\n\\r\\n    function sendSphs(address sender, address recipient, uint amount) internal {\\r\\n        require(buyersTokens[sender].sphs >= amount, \\\"Not enough user sphs on the contract!\\\");\\r\\n\\r\\n        // (bool sent, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        // require(sent, \\\"Failed to send Sph\\\");\\r\\n        //int response = HederaTokenService.transferToken(spheraTokenAddress, address(this), recipient, int64(uint64(amount)));\\r\\n        spheraTokenAddress.transfer(recipient, amount);\\r\\n        //require(response == HederaResponseCodes.SUCCESS, \\\"Failed to transfer Sphera Token\\\");\\r\\n\\r\\n        if (sender != address(this)) {\\r\\n            buyersTokens[sender].sphs -= amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // acceptedBuyer address(0) = return money to everybody\\r\\n    function removeBids(string memory nftId, address moneyBackException) internal {\\r\\n        int index = int(tokenBids[nftId].length) - 1;\\r\\n\\r\\n        while (index >= 0) {\\r\\n            uint _index = uint(index);\\r\\n            Bid memory bid = tokenBids[nftId][_index];\\r\\n\\r\\n            // return money from bid\\r\\n            if (bid.owner != moneyBackException) {\\r\\n                sendSphs(bid.owner, bid.owner, bid.amount);\\r\\n            }\\r\\n\\r\\n            removeBidInfo(nftId, bid.owner);\\r\\n\\r\\n            index = int(tokenBids[nftId].length) - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToString(address _addr) internal pure returns (string memory) {\\r\\n        bytes32 value = bytes32(uint(uint160(_addr)));\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n        bytes memory str = new bytes(42);\\r\\n        str[0] = \\\"0\\\";\\r\\n        str[1] = \\\"x\\\";\\r\\n\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\r\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    function uint256ToString(uint _num) internal pure returns (string memory) {\\r\\n        if (_num == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n\\r\\n        uint num = _num;\\r\\n        uint digits = 0;\\r\\n        uint tempNum = num;\\r\\n\\r\\n        while (tempNum != 0) {\\r\\n            digits++;\\r\\n            tempNum /= 10;\\r\\n        }\\r\\n\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n\\r\\n        uint index = digits;\\r\\n\\r\\n        while (num != 0) {\\r\\n            index--;\\r\\n            buffer[index] = bytes1(uint8(48 + (num % 10)));\\r\\n            num /= 10;\\r\\n        }\\r\\n\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function concatenateAddressAndInt(address _addr, uint _num) internal pure returns (string memory) {\\r\\n        string memory addressString = addressToString(_addr);\\r\\n        string memory intString = uint256ToString(_num);\\r\\n\\r\\n        return string(abi.encodePacked(addressString, \\\"/\\\", intString));\\r\\n    }\\r\\n\\r\\n    function formatNftId(address _token, uint _serialNumber) internal pure returns (string memory) {\\r\\n        return concatenateAddressAndInt(_token, _serialNumber);\\r\\n    }\\r\\n\\r\\n    function getPaginatedBids(Bid[] memory bidArray, uint64 page, uint64 pageSize) private pure returns (Bid[] memory) {\\r\\n        if (bidArray.length == 0) {\\r\\n            return bidArray;\\r\\n        }\\r\\n\\r\\n        require(pageSize > 0, \\\"pageSize must be greater than 0\\\");\\r\\n        require(page > 0, \\\"pagination is starting at 1\\\");\\r\\n\\r\\n        uint startIndex = (page - 1) * pageSize;\\r\\n        require(startIndex < bidArray.length, \\\"Page out of bounds\\\");\\r\\n\\r\\n        uint endIndex = startIndex + pageSize;\\r\\n        if (endIndex > bidArray.length) {\\r\\n            endIndex = bidArray.length;\\r\\n        }\\r\\n\\r\\n        Bid[] memory pageBids = new Bid[](endIndex - startIndex);\\r\\n\\r\\n        for (uint i = startIndex; i < endIndex; i++) {\\r\\n            pageBids[i - startIndex] = bidArray[i];\\r\\n        }\\r\\n\\r\\n        return pageBids;\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    //////////// PUBLIC /////////////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    // function associateToken(address _token) external onlyContractOwner returns (int) {\\r\\n    //     int response = HederaTokenService.associateToken(address(this), _token);\\r\\n\\r\\n    //     if (response != HederaResponseCodes.SUCCESS) {\\r\\n    //         revert(\\\"Failed to associate token\\\");\\r\\n    //     }\\r\\n\\r\\n    //     return response;\\r\\n    // }\\r\\n\\r\\n    function getTokenBid(address _token, uint _serialNumber, address _buyer) public view returns (Bid memory) {\\r\\n        string memory nftId = formatNftId(_token, _serialNumber);\\r\\n\\r\\n        Bid memory bid = Bid({amount: 0, owner: payable(_buyer), token: _token, serialNumber: _serialNumber});\\r\\n\\r\\n        BidIndexes memory bidIndex = buyersBidsIndexes[_buyer][nftId];\\r\\n\\r\\n        if (!bidIndex.isSet) {\\r\\n            return bid;\\r\\n        }\\r\\n\\r\\n        return tokenBids[nftId][bidIndex.tokenIndex];\\r\\n    }\\r\\n\\r\\n    function getTokenBids(address _token, uint _serialNumber, uint64 page, uint64 pageSize) public view returns (Bid[] memory) {\\r\\n        string memory nftId = formatNftId(_token, _serialNumber);\\r\\n        Bid[] memory allBids = tokenBids[nftId];\\r\\n\\r\\n        return getPaginatedBids(allBids, page, pageSize);\\r\\n    }\\r\\n\\r\\n    function getReceivedBids(address _owner, uint64 page, uint64 pageSize) public view returns (Bid[] memory) {\\r\\n        Bid[] memory allBids = receivedBids[_owner];\\r\\n\\r\\n        return getPaginatedBids(allBids, page, pageSize);\\r\\n    }\\r\\n\\r\\n    function getSentBids(address _buyer, uint64 page, uint64 pageSize) public view returns (Bid[] memory) {\\r\\n        Bid[] memory allBids = sentBids[_buyer];\\r\\n\\r\\n        return getPaginatedBids(allBids, page, pageSize);\\r\\n    }\\r\\n\\r\\n    function getNonFungibleTokenInfo(address _token, uint _id) internal view returns (NonFungibleTokenInfo memory) {\\r\\n        IERC721 nftContract = IERC721(_token);\\r\\n        NonFungibleTokenInfo memory tokenInfo = NonFungibleTokenInfo({owner: nftContract.ownerOf(_id), spender: nftContract.getApproved(_id)});\\r\\n        return tokenInfo;\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    ////////// NFT OWNER ////////////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function listNFT(address[] memory _tokens, uint[] memory _serialNumbers, uint[] memory _prices) external returns (uint) {\\r\\n        require(_tokens.length > 0 && _serialNumbers.length > 0 && _prices.length > 0, \\\"Array length should be more than 0\\\");\\r\\n        require(_tokens.length == _serialNumbers.length && _tokens.length == _prices.length, \\\"Arrays length mismatch\\\");\\r\\n\\r\\n        for (uint i = 0; i < _tokens.length; i++) {\\r\\n            address _token = _tokens[i];\\r\\n            uint _serialNumber = _serialNumbers[i];\\r\\n            uint _price = _prices[i];\\r\\n\\r\\n            NonFungibleTokenInfo memory tokenInfo = getNonFungibleTokenInfo(_token, _serialNumber);\\r\\n\\r\\n            //require(responseCode == HederaResponseCodes.SUCCESS, \\\"Failed to fetch NFT Info\\\");\\r\\n            require(tokenInfo.spender == address(this), \\\"The Contract doesn't have allowance for this token\\\");\\r\\n            require(msg.sender == tokenInfo.owner, \\\"You have no permission for this function\\\");\\r\\n\\r\\n            string memory nftId = formatNftId(_token, _serialNumber);\\r\\n\\r\\n            if (nfts[nftId].isListed && nfts[nftId].owner != tokenInfo.owner) {\\r\\n                removeBids(nftId, address(0));\\r\\n            }\\r\\n\\r\\n            nfts[nftId] = NFT({owner: payable(tokenInfo.owner), price: _price, token: _token, serialNumber: _serialNumber, isListed: true});\\r\\n\\r\\n            emit ListNFT(_token, _serialNumber, msg.sender, _price);\\r\\n\\r\\n            Bid memory maxAmountBid;\\r\\n            for (uint j = 0; j < tokenBids[nftId].length; j++) {\\r\\n                Bid memory bid = tokenBids[nftId][j];\\r\\n\\r\\n                if (bid.amount >= nfts[nftId].price && bid.amount > maxAmountBid.amount) {\\r\\n                    maxAmountBid = bid;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (maxAmountBid.amount != 0) {\\r\\n                this.acceptBid(_token, _serialNumber, maxAmountBid.owner, maxAmountBid.amount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return uint(MarketResponseCodes.SUCCESS);\\r\\n    }\\r\\n\\r\\n    function unlistNFT(address _token, uint _serialNumber) external returns (uint) {\\r\\n        string memory nftId = formatNftId(_token, _serialNumber);\\r\\n\\r\\n        NonFungibleTokenInfo memory tokenInfo = getNonFungibleTokenInfo(_token, _serialNumber);\\r\\n\\r\\n        //require(responseCode == HederaResponseCodes.SUCCESS, \\\"Failed to fetch NFT Info\\\");\\r\\n\\r\\n        require(msg.sender == tokenInfo.owner || msg.sender == contractOwner, \\\"You have no permission for this function\\\");\\r\\n\\r\\n        removeBids(nftId, address(0));\\r\\n\\r\\n        nfts[nftId].isListed = false;\\r\\n\\r\\n        emit UnlistNFT(_token, _serialNumber, tokenInfo.owner, nfts[nftId].price);\\r\\n        return uint(MarketResponseCodes.SUCCESS);\\r\\n    }\\r\\n\\r\\n    function acceptBid(address _token, uint _serialNumber, address payable _buyer, uint _acceptedBidAmount) external returns (uint) {\\r\\n        string memory nftId = formatNftId(_token, _serialNumber);\\r\\n\\r\\n        require(msg.sender == nfts[nftId].owner || msg.sender == address(this), \\\"You have no permission for this function\\\");\\r\\n        require(nfts[nftId].isListed, \\\"NFT not listed\\\");\\r\\n\\r\\n        NonFungibleTokenInfo memory nftInfo = getNonFungibleTokenInfo(_token, _serialNumber);\\r\\n\\r\\n        //require(responseCode == HederaResponseCodes.SUCCESS, \\\"Failed to fetch NFT Info\\\");\\r\\n        require(nftInfo.spender == address(this), \\\"Contract doesn't have allowance for this NFT\\\");\\r\\n        require(buyersBidsIndexes[_buyer][nftId].isSet, \\\"Buyer doesn't have bid for this NFT\\\");\\r\\n        require(tokenBids[nftId][buyersBidsIndexes[_buyer][nftId].tokenIndex].amount == _acceptedBidAmount, \\\"This buyer didn't suggest that price value for this NFT\\\");\\r\\n        require(buyersTokens[_buyer].sphs >= _acceptedBidAmount, \\\"Buyer doesn't have enough SPHs in the contract\\\");\\r\\n\\r\\n        // not sure about royalty\\r\\n        uint ownerRewardAmount = _acceptedBidAmount;\\r\\n\\r\\n        if (taxFee > 0) {\\r\\n            uint taxAmount = ownerRewardAmount * uint(int(taxFee / 1000));\\r\\n\\r\\n            require(treasuryWalletAddress != address(0), \\\"Treasury wallet address not set up.\\\");\\r\\n            //int response = HederaTokenService.transferToken(spheraTokenAddress, address(this), treasuryWalletAddress, int64(uint64(taxAmount)));\\r\\n            //require(response == HederaResponseCodes.SUCCESS, \\\"Failed to send tax Sph.\\\");\\r\\n            spheraTokenAddress.transfer(treasuryWalletAddress, taxAmount);\\r\\n\\r\\n            ownerRewardAmount -= taxAmount;\\r\\n        }\\r\\n        (address receiver, uint256 royaltyAmount) = ERC721Royalty(_token).royaltyInfo(_serialNumber, ownerRewardAmount);\\r\\n        //uint royaltyAmount = ownerRewardAmount * uint(int(royalty.numerator / royalty.denominator));\\r\\n\\r\\n        // (bool royaltySent, ) = payable(royalty.feeCollector).call{value: royaltyAmount}(\\\"\\\");\\r\\n        // require(royaltySent, \\\"Failed to send royalty Sph\\\");\\r\\n\\r\\n        // int response = HederaTokenService.transferToken(spheraTokenAddress, address(this), royalty.feeCollector, int64(uint64(royaltyAmount)));\\r\\n        // require(response == HederaResponseCodes.SUCCESS, \\\"Failed to send royalty Sph\\\");\\r\\n        spheraTokenAddress.transfer(receiver, royaltyAmount);\\r\\n\\r\\n        ownerRewardAmount -= royaltyAmount;\\r\\n\\r\\n        sendSphs(_buyer, nfts[nftId].owner, ownerRewardAmount);\\r\\n\\r\\n        // transfer NFT\\r\\n        // int nftTransferResponse = this.transferFromNFT(_token, nfts[nftId].owner, _buyer, _serialNumber);\\r\\n        // require(nftTransferResponse == HederaResponseCodes.SUCCESS, \\\"Failed to transfer NFT\\\");\\r\\n        IERC721(_token).safeTransferFrom(nfts[nftId].owner, _buyer, _serialNumber);\\r\\n        // return money for other bids\\r\\n        removeBids(nftId, _buyer);\\r\\n\\r\\n        emit AcceptBid(_token, _serialNumber, nfts[nftId].owner, _buyer, _acceptedBidAmount);\\r\\n\\r\\n        // Unlist nft.\\r\\n        nfts[nftId].isListed = false;\\r\\n        nfts[nftId].owner = _buyer;\\r\\n\\r\\n        return uint(MarketResponseCodes.SUCCESS);\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    ///////////// BUYER /////////////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function addBid(address _token, uint _serialNumber, uint tokenAmount) external payable returns (uint) {\\r\\n        address payable _buyer = payable(msg.sender);\\r\\n        string memory nftId = formatNftId(_token, _serialNumber);\\r\\n\\r\\n        require(nfts[nftId].isListed, \\\"NFT not listed\\\");\\r\\n\\r\\n        NonFungibleTokenInfo memory nftInfo = getNonFungibleTokenInfo(_token, _serialNumber);\\r\\n\\r\\n        //require(responseCode == HederaResponseCodes.SUCCESS, \\\"Failed to fetch NFT Info\\\");\\r\\n        require(nftInfo.owner == nfts[nftId].owner, \\\"Nft owner has been changed. Invalid NFT listing.\\\");\\r\\n\\r\\n        // int response = HederaTokenService.transferToken(spheraTokenAddress, msg.sender, address(this), int64(uint64(tokenAmount)));\\r\\n        // require(response == HederaResponseCodes.SUCCESS, \\\"Failed to transfer Sphera Token\\\");\\r\\n        spheraTokenAddress.transferFrom(msg.sender, address(this), tokenAmount);\\r\\n        // add buyer info to contract to track buyer money in the contract\\r\\n        if (buyersTokens[_buyer].sphs == 0) {\\r\\n            buyersTokens[_buyer] = BuyerTokens({sphs: tokenAmount});\\r\\n        } else {\\r\\n            buyersTokens[_buyer].sphs += tokenAmount;\\r\\n        }\\r\\n\\r\\n        BidIndexes memory prevBidIndex = buyersBidsIndexes[_buyer][nftId];\\r\\n\\r\\n        if (buyersBidsIndexes[_buyer][nftId].isSet) {\\r\\n            Bid memory _previousBid = tokenBids[nftId][prevBidIndex.tokenIndex];\\r\\n\\r\\n            sendSphs(_buyer, _buyer, _previousBid.amount);\\r\\n\\r\\n            tokenBids[nftId][prevBidIndex.tokenIndex].amount = tokenAmount;\\r\\n            receivedBids[nfts[nftId].owner][prevBidIndex.receivedIndex].amount = tokenAmount;\\r\\n            sentBids[_buyer][prevBidIndex.sentIndex].amount = tokenAmount;\\r\\n\\r\\n            if (tokenAmount >= nfts[nftId].price) {\\r\\n                return this.acceptBid(_token, _serialNumber, _buyer, tokenAmount);\\r\\n            }\\r\\n\\r\\n            emit AddBid(_token, _serialNumber, nftInfo.owner, msg.sender, tokenAmount);\\r\\n            return uint(MarketResponseCodes.SUCCESS);\\r\\n        }\\r\\n\\r\\n        // add bid and save its index\\r\\n        Bid memory bid = Bid({amount: tokenAmount, owner: _buyer, token: _token, serialNumber: _serialNumber});\\r\\n\\r\\n        tokenBids[nftId].push(bid);\\r\\n        sentBids[msg.sender].push(bid);\\r\\n        receivedBids[nfts[nftId].owner].push(bid);\\r\\n\\r\\n        buyersBidsIndexes[_buyer][nftId] = BidIndexes({tokenIndex: tokenBids[nftId].length - 1, sentIndex: sentBids[msg.sender].length - 1, receivedIndex: receivedBids[nfts[nftId].owner].length - 1, isSet: true});\\r\\n\\r\\n        if (tokenAmount >= nfts[nftId].price) {\\r\\n            return this.acceptBid(_token, _serialNumber, _buyer, bid.amount);\\r\\n        }\\r\\n\\r\\n        emit AddBid(_token, _serialNumber, nftInfo.owner, msg.sender, tokenAmount);\\r\\n        return uint(MarketResponseCodes.SUCCESS);\\r\\n    }\\r\\n\\r\\n    function deleteBid(address _token, uint _serialNumber, address payable _buyer) external returns (uint) {\\r\\n        string memory nftId = formatNftId(_token, _serialNumber);\\r\\n\\r\\n        require(msg.sender == _buyer || msg.sender == contractOwner, \\\"You have no permissions for this function.\\\");\\r\\n        require(buyersBidsIndexes[_buyer][nftId].isSet, \\\"You have no bids for this NFT\\\");\\r\\n\\r\\n        uint bidTokenIndex = buyersBidsIndexes[_buyer][nftId].tokenIndex;\\r\\n        Bid memory bid = tokenBids[nftId][bidTokenIndex];\\r\\n\\r\\n        require(buyersTokens[_buyer].sphs >= tokenBids[nftId][bidTokenIndex].amount, \\\"You have no enough money in the contract to delete bid\\\");\\r\\n\\r\\n        emit DeleteBid(_token, _serialNumber, msg.sender, bid.amount);\\r\\n\\r\\n        sendSphs(_buyer, _buyer, bid.amount);\\r\\n        removeBidInfo(nftId, bid.owner);\\r\\n\\r\\n        return uint(MarketResponseCodes.SUCCESS);\\r\\n    }\\r\\n\\r\\n    function changeTaxFee(uint _newFee) public onlyContractOwner {\\r\\n        taxFee = _newFee;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x639dcab1ea18084ea08a4cad323bf1caeab7ccb9715929c10ee3d31a1f729890\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526019600b5534801561001557600080fd5b50600880546001600160a01b03191633179055613a2d806100376000396000f3fe60806040526004361061012d5760003560e01c80637fc27efd116100a5578063bc78a32a1161006c578063bc78a32a14610420578063d5cae81f14610440578063d7dbd71b14610460578063e2d4d36014610480578063f2ce238a146104ad578063f40774061461053057005b80637fc27efd1461030d5780639d170dd71461032d578063a071dcf41461034d578063a7e5c46414610363578063b66fb0901461038357005b8063443349b1116100f4578063443349b1146102335780634d0df92b146102605780634e524b5014610280578063584e8d2a146102a05780635efd930b146102c05780636c7f20c0146102e057005b806301ffc9a71461013657806316e807c41461016b5780632a55205a1461018c578063322b71d8146101cb57806332a12a231461020357005b3661013457005b005b34801561014257600080fd5b50610156610151366004613121565b610550565b60405190151581526020015b60405180910390f35b61017e610179366004613163565b610587565b604051908152602001610162565b34801561019857600080fd5b506101ac6101a7366004613198565b610e22565b604080516001600160a01b039093168352602083019190915201610162565b3480156101d757600080fd5b506009546101eb906001600160a01b031681565b6040516001600160a01b039091168152602001610162565b34801561020f57600080fd5b5061022361021e3660046131ba565b610ece565b60405161016294939291906131e6565b34801561023f57600080fd5b5061025361024e36600461322c565b610f22565b604051610162919061327b565b34801561026c57600080fd5b5061013461027b3660046132f5565b610ff0565b34801561028c57600080fd5b5061017e61029b366004613312565b61103c565b3480156102ac57600080fd5b506101346102bb36600461335a565b611764565b3480156102cc57600080fd5b506101346102db3660046132f5565b611793565b3480156102ec57600080fd5b5061017e6102fb3660046132f5565b60066020526000908152604090205481565b34801561031957600080fd5b5061017e6103283660046131ba565b6117df565b34801561033957600080fd5b50610253610348366004613373565b6118f4565b34801561035957600080fd5b5061017e600b5481565b34801561036f57600080fd5b5061017e61037e3660046133b8565b6119a5565b34801561038f57600080fd5b506103e761039e3660046134af565b8051602081830181018051600782529282019190930120915280546001820154600283015460038401546004909401546001600160a01b03938416949293909116919060ff1685565b604080516001600160a01b039687168152602081019590955292909416918301919091526060820152901515608082015260a001610162565b34801561042c57600080fd5b5061022361043b3660046134eb565b611cb8565b34801561044c57600080fd5b5061017e61045b3660046135b2565b611ce3565b34801561046c57600080fd5b5061025361047b366004613373565b6121e8565b34801561048c57600080fd5b506104a061049b3660046133b8565b61227c565b6040516101629190613697565b3480156104b957600080fd5b5061050e6104c83660046136d0565b6005602090815260009283526040909220815180830184018051928152908401929093019190912091528054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610162565b34801561053c57600080fd5b5061022361054b3660046131ba565b6123c1565b60006001600160e01b0319821663152a902d60e11b148061058157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000338161059586866123dd565b90506007816040516105a7919061374f565b9081526040519081900360200190206004015460ff166105ff5760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1a5cdd195960921b60448201526064015b60405180910390fd5b600061060b87876123e9565b905060078260405161061d919061374f565b9081526040519081900360200190205481516001600160a01b039081169116146106a25760405162461bcd60e51b815260206004820152603060248201527f4e6674206f776e657220686173206265656e206368616e6765642e20496e766160448201526f3634b21027232a103634b9ba34b7339760811b60648201526084016105f6565b6009546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d919061375b565b506001600160a01b038316600090815260066020526040812054900361076c5760408051602080820183528782526001600160a01b03861660009081526006909152919091209051905561079a565b6001600160a01b03831660009081526006602052604081208054879290610794908490613793565b90915550505b6001600160a01b03831660009081526005602052604080822090516107c090859061374f565b908152604080519182900360209081018320608084018352805484526001810154848301526002810154848401526003015460ff16151560608401526001600160a01b0387166000908152600590915281902090519192509061082490859061374f565b9081526040519081900360200190206003015460ff1615610ac0576000600284604051610851919061374f565b908152604051908190036020019020825181548110610872576108726137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03908116845260018201549484018590526002820154169183019190915260030154606082015291506108ce9086908190612505565b866002856040516108df919061374f565b908152604051908190036020019020835181548110610900576109006137a6565b906000526020600020906004020160010181905550866003600060078760405161092a919061374f565b9081526040805160209281900383019020546001600160a01b031683528282019390935291016000209084015181548110610967576109676137a6565b9060005260206000209060040201600101819055508660046000876001600160a01b03166001600160a01b031681526020019081526020016000208360400151815481106109b7576109b76137a6565b9060005260206000209060040201600101819055506007846040516109dc919061374f565b9081526020016040518091039020600101548710610a6c576040516304e524b560e41b81523090634e524b5090610a1d908c908c908a908d906004016131e6565b6020604051808303816000875af1158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906137bc565b95505050505050610e1b565b8251604080518a8152602081018a905233926001600160a01b0390811692908d16917f36d6fe2f8514bad704749bcc0910b552f83180da8b6690b8a953fc2086d9a9c1910160405180910390a46000610a60565b604080516080810182526001600160a01b038087168252602082018990528a1681830152606081018990529051600290610afb90869061374f565b908152604080516020928190038301812080546001808201835560009283528583208751600493840290910180546001600160a01b03199081166001600160a01b039384161782558989018051838601558a890180516002808601805486169288169290921790915560608d018051600396870155338a52888d529a892080548089018255908a529b89208d519c909802909701805484169b86169b909b178b559051948a01949094559251938801805490931693909116929092179055925193830193909355909190600790610bd390889061374f565b9081526040805160209281900383019020546001600160a01b03908116845283830194909452918201600090812080546001808201835591835291839020865160049093020180546001600160a01b0319908116938716939093178155928601518382015585840151600280850180549094169190961617909155606085015160039092019190915581516080810192839052928392610c7490899061374f565b90815260405190819003602001902054610c8e91906137d5565b8152602001600160036000600789604051610ca9919061374f565b9081526040805160209281900383019020546001600160a01b03168352908201929092520160002054610cdc91906137d5565b815233600090815260046020908152604090912054910190610d00906001906137d5565b815260016020918201526001600160a01b038716600090815260059091526040908190209051610d3190879061374f565b9081526040805160209281900383018120845181559284015160018401559083015160028301556060909201516003909101805460ff1916911515919091179055600790610d8090869061374f565b9081526020016040518091039020600101548710610dc45760208101516040516304e524b560e41b81523091634e524b5091610a1d918d918d918b916004016131e6565b8251604080518a8152602081018a905233926001600160a01b0390811692908d16917f36d6fe2f8514bad704749bcc0910b552f83180da8b6690b8a953fc2086d9a9c1910160405180910390a46000955050505050505b9392505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610e975750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610eb6906001600160601b0316876137e8565b610ec09190613815565b915196919550909350505050565b60046020528160005260406000208181548110610eea57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b03928316955090935091169084565b60606000610f3086866123dd565b90506000600282604051610f44919061374f565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610fd4576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154858701526002830154909116928401929092526003015460608301529083529092019101610f72565b505050509050610fe5818686612636565b979650505050505050565b6008546001600160a01b0316331461101a5760405162461bcd60e51b81526004016105f690613829565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60008061104986866123dd565b905060078160405161105b919061374f565b90815260405190819003602001902054336001600160a01b03909116148061108257503330145b61109e5760405162461bcd60e51b81526004016105f690613859565b6007816040516110ae919061374f565b9081526040519081900360200190206004015460ff166111015760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1a5cdd195960921b60448201526064016105f6565b600061110d87876123e9565b60208101519091506001600160a01b031630146111815760405162461bcd60e51b815260206004820152602c60248201527f436f6e747261637420646f65736e2774206861766520616c6c6f77616e63652060448201526b199bdc881d1a1a5cc813919560a21b60648201526084016105f6565b6001600160a01b0385166000908152600560205260409081902090516111a890849061374f565b9081526040519081900360200190206003015460ff166112165760405162461bcd60e51b815260206004820152602360248201527f427579657220646f65736e277420686176652062696420666f7220746869732060448201526213919560ea1b60648201526084016105f6565b83600283604051611227919061374f565b908152602001604051809103902060056000886001600160a01b03166001600160a01b0316815260200190815260200160002084604051611268919061374f565b9081526040519081900360200190205481548110611288576112886137a6565b9060005260206000209060040201600101541461130d5760405162461bcd60e51b815260206004820152603760248201527f54686973206275796572206469646e277420737567676573742074686174207060448201527f726963652076616c756520666f722074686973204e465400000000000000000060648201526084016105f6565b6001600160a01b03851660009081526006602052604090205484111561138c5760405162461bcd60e51b815260206004820152602e60248201527f427579657220646f65736e2774206861766520656e6f7567682053504873206960448201526d1b881d1a194818dbdb9d1c9858dd60921b60648201526084016105f6565b600b548490156114a15760006103e8600b546113a89190613815565b6113b290836137e8565b600a549091506001600160a01b03166114195760405162461bcd60e51b815260206004820152602360248201527f54726561737572792077616c6c65742061646472657373206e6f7420736574206044820152623ab81760e91b60648201526084016105f6565b600954600a5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af115801561146e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611492919061375b565b5061149d81836137d5565b9150505b60405163152a902d60e11b8152600481018890526024810182905260009081906001600160a01b038b1690632a55205a906044016040805180830381865afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151591906138a1565b60095460405163a9059cbb60e01b81526001600160a01b03808516600483015260248201849052939550919350919091169063a9059cbb906044016020604051808303816000875af115801561156f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611593919061375b565b5061159e81846137d5565b92506115d3886007876040516115b4919061374f565b908152604051908190036020019020546001600160a01b031685612505565b896001600160a01b03166342842e0e6007876040516115f2919061374f565b908152604051908190036020018120546001600160e01b031960e084901b1682526001600160a01b0390811660048301528b166024820152604481018c9052606401600060405180830381600087803b15801561164e57600080fd5b505af1158015611662573d6000803e3d6000fd5b50505050611670858961284f565b876001600160a01b031660078660405161168a919061374f565b9081526040805160209281900383018120548d82529281018b90526001600160a01b03928316928e16917f6e7a4c46395b56b7d97ccc3926f0db0dac3c760b187854dd2497e50c4dc82d62910160405180910390a460006007866040516116f1919061374f565b908152604051908190036020018120600401805492151560ff1990931692909217909155889060079061172590889061374f565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905560009a9950505050505050505050565b6008546001600160a01b0316331461178e5760405162461bcd60e51b81526004016105f690613829565b600b55565b6008546001600160a01b031633146117bd5760405162461bcd60e51b81526004016105f690613829565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000806117ec84846123dd565b905060006117fa85856123e9565b80519091506001600160a01b031633148061181f57506008546001600160a01b031633145b61183b5760405162461bcd60e51b81526004016105f690613859565b61184682600061284f565b6000600783604051611858919061374f565b908152602001604051809103902060040160006101000a81548160ff02191690831515021790555080600001516001600160a01b031684866001600160a01b03167f80a72ae9592e395c65a589d23febcc7bef05213af5110bf6e547949373c815036007866040516118ca919061374f565b908152604051602091819003820181206001015481520160405180910390a4506000949350505050565b6001600160a01b0383166000908152600360209081526040808320805482518185028101850190935280835260609493849084015b8282101561198b576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154858701526002830154909116928401929092526003015460608301529083529092019101611929565b50505050905061199c818585612636565b95945050505050565b6000806119b285856123dd565b9050336001600160a01b03841614806119d557506008546001600160a01b031633145b611a345760405162461bcd60e51b815260206004820152602a60248201527f596f752068617665206e6f207065726d697373696f6e7320666f72207468697360448201526910333ab731ba34b7b71760b11b60648201526084016105f6565b6001600160a01b038316600090815260056020526040908190209051611a5b90839061374f565b9081526040519081900360200190206003015460ff16611abd5760405162461bcd60e51b815260206004820152601d60248201527f596f752068617665206e6f206269647320666f722074686973204e465400000060448201526064016105f6565b6001600160a01b0383166000908152600560205260408082209051611ae390849061374f565b908152604051908190036020018120549150600090600290611b0690859061374f565b90815260200160405180910390208281548110611b2557611b256137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0390811684526001820154948401949094526002808201549094168383015260030154606083015251909250611b8290859061374f565b90815260200160405180910390208281548110611ba157611ba16137a6565b60009182526020808320600160049093020191909101546001600160a01b038816835260069091526040909120541015611c3c5760405162461bcd60e51b815260206004820152603660248201527f596f752068617665206e6f20656e6f756768206d6f6e657920696e207468652060448201527518dbdb9d1c9858dd081d1bc819195b195d1948189a5960521b60648201526084016105f6565b336001600160a01b031686886001600160a01b03167f14db41ce7a73af30b2195ae2a1cdfe6165695f7af0d286d97da60d47b75318258460200151604051611c8691815260200190565b60405180910390a4611c9d85868360200151612505565b611cab83826000015161296e565b6000979650505050505050565b81516020818401810180516002825292820191850191909120919052805482908110610eea57600080fd5b6000808451118015611cf6575060008351115b8015611d03575060008251115b611d5a5760405162461bcd60e51b815260206004820152602260248201527f4172726179206c656e6774682073686f756c64206265206d6f7265207468616e604482015261020360f41b60648201526084016105f6565b82518451148015611d6c575081518451145b611db15760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b60448201526064016105f6565b60005b84518110156121dd576000858281518110611dd157611dd16137a6565b602002602001015190506000858381518110611def57611def6137a6565b602002602001015190506000858481518110611e0d57611e0d6137a6565b602002602001015190506000611e2384846123e9565b60208101519091506001600160a01b03163014611e9d5760405162461bcd60e51b815260206004820152603260248201527f54686520436f6e747261637420646f65736e2774206861766520616c6c6f77616044820152713731b2903337b9103a3434b9903a37b5b2b760711b60648201526084016105f6565b80516001600160a01b03163314611ec65760405162461bcd60e51b81526004016105f690613859565b6000611ed285856123dd565b9050600781604051611ee4919061374f565b9081526040519081900360200190206004015460ff168015611f3b575081600001516001600160a01b0316600782604051611f1f919061374f565b908152604051908190036020019020546001600160a01b031614155b15611f4b57611f4b81600061284f565b6040805160a08101825283516001600160a01b0390811682526020820186905287168183015260608101869052600160808201529051600790611f8f90849061374f565b9081526040805160209281900383018120845181546001600160a01b03199081166001600160a01b039283161783558686015160018401559386015160028301805490951690821617909355606085015160038201556080909401516004909401805460ff19169415159490941790935585835233928792918916917fe065949781be696d3f91077ee93178e3eb0472a4e60456f00a1161fde5735832910160405180910390a461203e6130e7565b60005b600283604051612051919061374f565b9081526040519081900360200190205481101561214657600060028460405161207a919061374f565b90815260200160405180910390208281548110612099576120996137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015494840194909452600281015490931682820152600390920154606082015290519091506007906120fb90869061374f565b908152602001604051809103902060010154816020015110158015612127575082602001518160200151115b15612133579150612146565b508061213e816138cf565b915050612041565b506020810151156121c457805160208201516040516304e524b560e41b81523092634e524b509261217f928b928b9290916004016131e6565b6020604051808303816000875af115801561219e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c291906137bc565b505b50505050505080806121d5906138cf565b915050611db4565b506000949350505050565b6001600160a01b038316600090815260046020908152604080832080548251818502810185019093528083526060949384908401821561198b576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154858701526002830154909116928401929092526003015460608301529083529092019101611929565b6122846130e7565b600061229085856123dd565b604080516080810182526001600160a01b0380871680835260006020808501829052928b1684860152606084018a90529081526005909152828120925193945090929091906122e090859061374f565b908152604080519182900360209081018320608084018352805484526001810154918401919091526002810154918301919091526003015460ff1615156060820181905290915061233557509150610e1b9050565b600283604051612345919061374f565b908152604051908190036020019020815181548110612366576123666137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015494840194909452600281015490931690820152600390910154606082015293505050509392505050565b60036020528160005260406000208181548110610eea57600080fd5b6060610e1b8383612da7565b604080518082019091526000808252602082015260408051808201918290526331a9108f60e11b909152604481018390528390600090806001600160a01b038416636352211e60648301602060405180830381865afa158015612450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247491906138e8565b6001600160a01b03168152602001836001600160a01b031663081812fc876040518263ffffffff1660e01b81526004016124b091815260200190565b602060405180830381865afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f191906138e8565b6001600160a01b0316905295945050505050565b6001600160a01b03831660009081526006602052604090205481111561257b5760405162461bcd60e51b815260206004820152602560248201527f4e6f7420656e6f75676820757365722073706873206f6e2074686520636f6e74604482015264726163742160d81b60648201526084016105f6565b60095460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156125ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f2919061375b565b506001600160a01b0383163014612631576001600160a01b0383166000908152600660205260408120805483929061262b9084906137d5565b90915550505b505050565b60608351600003612648575082610e1b565b6000826001600160401b0316116126a15760405162461bcd60e51b815260206004820152601f60248201527f7061676553697a65206d7573742062652067726561746572207468616e20300060448201526064016105f6565b6000836001600160401b0316116126fa5760405162461bcd60e51b815260206004820152601b60248201527f706167696e6174696f6e206973207374617274696e672061742031000000000060448201526064016105f6565b600082612708600186613905565b612712919061392c565b6001600160401b03169050845181106127625760405162461bcd60e51b815260206004820152601260248201527150616765206f7574206f6620626f756e647360701b60448201526064016105f6565b60006127776001600160401b03851683613793565b90508551811115612786575084515b600061279283836137d5565b6001600160401b038111156127a9576127a96133fa565b6040519080825280602002602001820160405280156127e257816020015b6127cf6130e7565b8152602001906001900390816127c75790505b509050825b8281101561284457878181518110612801576128016137a6565b602002602001015182858361281691906137d5565b81518110612826576128266137a6565b6020026020010181905250808061283c906138cf565b9150506127e7565b509695505050505050565b60006001600284604051612863919061374f565b9081526040519081900360200190205461287d9190613957565b90505b60008112612631576000819050600060028560405161289f919061374f565b908152602001604051809103902082815481106128be576128be6137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03908116808552600183015495850195909552600282015481169284019290925260030154606083015290925085161461292b578051602082015161292b91908190612505565b61293985826000015161296e565b600160028660405161294b919061374f565b908152604051908190036020019020546129659190613957565b92505050612880565b6000600783604051612980919061374f565b908152604080519182900360209081018320546001600160a01b03868116600090815260059093529290912091169250906129bc90859061374f565b9081526040519081900360200190206003015460ff16612a2a5760405162461bcd60e51b8152602060048201526024808201527f5468657265206973206e6f206269642c20796f752063616e27742072656d6f7660448201526319481a5d60e21b60648201526084016105f6565b6001600160a01b0382166000908152600560205260408082209051612a5090869061374f565b908152604080519182900360209081018320608084018352805484526001810154918401919091526002810154918301919091526003015460ff1615156060820152905060005b60038160ff161015612d57576000808260ff16600003612add57600287604051612ac1919061374f565b9081526020016040518091039020915083600001519050612b2f565b8260ff16600103612b0d5750506001600160a01b0384166000908152600460205260409081902090830151612b2f565b50506001600160a01b0383166000908152600360209081526040909120908301515b8154600090612b40906001906137d5565b90506000838281548110612b5657612b566137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015494840194909452600281015490931690820152600390910154606082015284549091508190859085908110612bbe57612bbe6137a6565b6000918252602091829020835160049092020180546001600160a01b039283166001600160a01b031991821617825592840151600182015560408401516002820180549190931693169290921790556060909101516003909101558354849080612c2a57612c2a613977565b60008281526020812060046000199093019283020180546001600160a01b03199081168255600182018390556002820180549091169055600301819055915560ff86169003612cb35780516001600160a01b0316600090815260056020526040908190209051849190612c9e908c9061374f565b90815260405190819003602001902055612d40565b8460ff16600103612d015780516001600160a01b0316600090815260056020526040908190209051849190612ce9908c9061374f565b90815260405190819003602001902060020155612d40565b80516001600160a01b0316600090815260056020526040908190209051849190612d2c908c9061374f565b908152604051908190036020019020600101555b505050508080612d4f9061398d565b915050612a97565b506001600160a01b0383166000908152600560205260408082209051612d7e90879061374f565b908152604051908190036020019020600301805491151560ff1990921691909117905550505050565b60606000612db484612def565b90506000612dc184612fda565b90508181604051602001612dd69291906139ac565b6040516020818303038152906040529250505092915050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a80825260608281019094526001600160a01b0385169291600091602082018180368337019050509050600360fc1b81600081518110612e5a57612e5a6137a6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e8957612e896137a6565b60200101906001600160f81b031916908160001a90535060005b6014811015612fd15782600485612ebb84600c613793565b60208110612ecb57612ecb6137a6565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110612ef157612ef16137a6565b01602001516001600160f81b03191682612f0c8360026137e8565b612f17906002613793565b81518110612f2757612f276137a6565b60200101906001600160f81b031916908160001a9053508284612f4b83600c613793565b60208110612f5b57612f5b6137a6565b825191901a600f16908110612f7257612f726137a6565b01602001516001600160f81b03191682612f8d8360026137e8565b612f98906003613793565b81518110612fa857612fa86137a6565b60200101906001600160f81b031916908160001a90535080612fc9816138cf565b915050612ea3565b50949350505050565b6060816000036130015750506040805180820190915260018152600360fc1b602082015290565b816000815b801561302c5781613016816138cf565b92506130259050600a82613815565b9050613006565b6000826001600160401b03811115613046576130466133fa565b6040519080825280601f01601f191660200182016040528015613070576020820181803683370190505b509050825b84156130dd5780613085816139cc565b91506130949050600a866139e3565b61309f906030613793565b60f81b8282815181106130b4576130b46137a6565b60200101906001600160f81b031916908160001a9053506130d6600a86613815565b9450613075565b5095945050505050565b604051806080016040528060006001600160a01b031681526020016000815260200160006001600160a01b03168152602001600081525090565b60006020828403121561313357600080fd5b81356001600160e01b031981168114610e1b57600080fd5b6001600160a01b038116811461316057600080fd5b50565b60008060006060848603121561317857600080fd5b83356131838161314b565b95602085013595506040909401359392505050565b600080604083850312156131ab57600080fd5b50508035926020909101359150565b600080604083850312156131cd57600080fd5b82356131d88161314b565b946020939093013593505050565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b80356001600160401b038116811461322757600080fd5b919050565b6000806000806080858703121561324257600080fd5b843561324d8161314b565b93506020850135925061326260408601613210565b915061327060608601613210565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b818110156132e9576132d683855180516001600160a01b0390811683526020808301519084015260408083015190911690830152606090810151910152565b9284019260809290920191600101613297565b50909695505050505050565b60006020828403121561330757600080fd5b8135610e1b8161314b565b6000806000806080858703121561332857600080fd5b84356133338161314b565b935060208501359250604085013561334a8161314b565b9396929550929360600135925050565b60006020828403121561336c57600080fd5b5035919050565b60008060006060848603121561338857600080fd5b83356133938161314b565b92506133a160208501613210565b91506133af60408501613210565b90509250925092565b6000806000606084860312156133cd57600080fd5b83356133d88161314b565b92506020840135915060408401356133ef8161314b565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613438576134386133fa565b604052919050565b600082601f83011261345157600080fd5b81356001600160401b0381111561346a5761346a6133fa565b61347d601f8201601f1916602001613410565b81815284602083860101111561349257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156134c157600080fd5b81356001600160401b038111156134d757600080fd5b6134e384828501613440565b949350505050565b600080604083850312156134fe57600080fd5b82356001600160401b0381111561351457600080fd5b61352085828601613440565b95602094909401359450505050565b60006001600160401b03821115613548576135486133fa565b5060051b60200190565b600082601f83011261356357600080fd5b813560206135786135738361352f565b613410565b82815260059290921b8401810191818101908684111561359757600080fd5b8286015b84811015612844578035835291830191830161359b565b6000806000606084860312156135c757600080fd5b83356001600160401b03808211156135de57600080fd5b818601915086601f8301126135f257600080fd5b813560206136026135738361352f565b82815260059290921b8401810191818101908a84111561362157600080fd5b948201945b838610156136485785356136398161314b565b82529482019490820190613626565b9750508701359250508082111561365e57600080fd5b61366a87838801613552565b9350604086013591508082111561368057600080fd5b5061368d86828701613552565b9150509250925092565b81516001600160a01b03908116825260208084015190830152604080840151909116908201526060808301519082015260808101610581565b600080604083850312156136e357600080fd5b82356136ee8161314b565b915060208301356001600160401b0381111561370957600080fd5b61371585828601613440565b9150509250929050565b6000815160005b818110156137405760208185018101518683015201613726565b50600093019283525090919050565b6000610e1b828461371f565b60006020828403121561376d57600080fd5b81518015158114610e1b57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105815761058161377d565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156137ce57600080fd5b5051919050565b818103818111156105815761058161377d565b80820281158282048414176105815761058161377d565b634e487b7160e01b600052601260045260246000fd5b600082613824576138246137ff565b500490565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b60208082526028908201527f596f752068617665206e6f207065726d697373696f6e20666f72207468697320604082015267333ab731ba34b7b760c11b606082015260800190565b600080604083850312156138b457600080fd5b82516138bf8161314b565b6020939093015192949293505050565b6000600182016138e1576138e161377d565b5060010190565b6000602082840312156138fa57600080fd5b8151610e1b8161314b565b6001600160401b038281168282160390808211156139255761392561377d565b5092915050565b6001600160401b0381811683821602808216919082811461394f5761394f61377d565b505092915050565b81810360008312801583831316838312821617156139255761392561377d565b634e487b7160e01b600052603160045260246000fd5b600060ff821660ff81036139a3576139a361377d565b60010192915050565b60006139b8828561371f565b602f60f81b815261199c600182018561371f565b6000816139db576139db61377d565b506000190190565b6000826139f2576139f26137ff565b50069056fea2646970667358221220c0b957b1cafa70710aadebb3cc8b0cb9ac872b6190ff643b6dbe3bf734ab592c64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061012d5760003560e01c80637fc27efd116100a5578063bc78a32a1161006c578063bc78a32a14610420578063d5cae81f14610440578063d7dbd71b14610460578063e2d4d36014610480578063f2ce238a146104ad578063f40774061461053057005b80637fc27efd1461030d5780639d170dd71461032d578063a071dcf41461034d578063a7e5c46414610363578063b66fb0901461038357005b8063443349b1116100f4578063443349b1146102335780634d0df92b146102605780634e524b5014610280578063584e8d2a146102a05780635efd930b146102c05780636c7f20c0146102e057005b806301ffc9a71461013657806316e807c41461016b5780632a55205a1461018c578063322b71d8146101cb57806332a12a231461020357005b3661013457005b005b34801561014257600080fd5b50610156610151366004613121565b610550565b60405190151581526020015b60405180910390f35b61017e610179366004613163565b610587565b604051908152602001610162565b34801561019857600080fd5b506101ac6101a7366004613198565b610e22565b604080516001600160a01b039093168352602083019190915201610162565b3480156101d757600080fd5b506009546101eb906001600160a01b031681565b6040516001600160a01b039091168152602001610162565b34801561020f57600080fd5b5061022361021e3660046131ba565b610ece565b60405161016294939291906131e6565b34801561023f57600080fd5b5061025361024e36600461322c565b610f22565b604051610162919061327b565b34801561026c57600080fd5b5061013461027b3660046132f5565b610ff0565b34801561028c57600080fd5b5061017e61029b366004613312565b61103c565b3480156102ac57600080fd5b506101346102bb36600461335a565b611764565b3480156102cc57600080fd5b506101346102db3660046132f5565b611793565b3480156102ec57600080fd5b5061017e6102fb3660046132f5565b60066020526000908152604090205481565b34801561031957600080fd5b5061017e6103283660046131ba565b6117df565b34801561033957600080fd5b50610253610348366004613373565b6118f4565b34801561035957600080fd5b5061017e600b5481565b34801561036f57600080fd5b5061017e61037e3660046133b8565b6119a5565b34801561038f57600080fd5b506103e761039e3660046134af565b8051602081830181018051600782529282019190930120915280546001820154600283015460038401546004909401546001600160a01b03938416949293909116919060ff1685565b604080516001600160a01b039687168152602081019590955292909416918301919091526060820152901515608082015260a001610162565b34801561042c57600080fd5b5061022361043b3660046134eb565b611cb8565b34801561044c57600080fd5b5061017e61045b3660046135b2565b611ce3565b34801561046c57600080fd5b5061025361047b366004613373565b6121e8565b34801561048c57600080fd5b506104a061049b3660046133b8565b61227c565b6040516101629190613697565b3480156104b957600080fd5b5061050e6104c83660046136d0565b6005602090815260009283526040909220815180830184018051928152908401929093019190912091528054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610162565b34801561053c57600080fd5b5061022361054b3660046131ba565b6123c1565b60006001600160e01b0319821663152a902d60e11b148061058157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000338161059586866123dd565b90506007816040516105a7919061374f565b9081526040519081900360200190206004015460ff166105ff5760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1a5cdd195960921b60448201526064015b60405180910390fd5b600061060b87876123e9565b905060078260405161061d919061374f565b9081526040519081900360200190205481516001600160a01b039081169116146106a25760405162461bcd60e51b815260206004820152603060248201527f4e6674206f776e657220686173206265656e206368616e6765642e20496e766160448201526f3634b21027232a103634b9ba34b7339760811b60648201526084016105f6565b6009546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d919061375b565b506001600160a01b038316600090815260066020526040812054900361076c5760408051602080820183528782526001600160a01b03861660009081526006909152919091209051905561079a565b6001600160a01b03831660009081526006602052604081208054879290610794908490613793565b90915550505b6001600160a01b03831660009081526005602052604080822090516107c090859061374f565b908152604080519182900360209081018320608084018352805484526001810154848301526002810154848401526003015460ff16151560608401526001600160a01b0387166000908152600590915281902090519192509061082490859061374f565b9081526040519081900360200190206003015460ff1615610ac0576000600284604051610851919061374f565b908152604051908190036020019020825181548110610872576108726137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03908116845260018201549484018590526002820154169183019190915260030154606082015291506108ce9086908190612505565b866002856040516108df919061374f565b908152604051908190036020019020835181548110610900576109006137a6565b906000526020600020906004020160010181905550866003600060078760405161092a919061374f565b9081526040805160209281900383019020546001600160a01b031683528282019390935291016000209084015181548110610967576109676137a6565b9060005260206000209060040201600101819055508660046000876001600160a01b03166001600160a01b031681526020019081526020016000208360400151815481106109b7576109b76137a6565b9060005260206000209060040201600101819055506007846040516109dc919061374f565b9081526020016040518091039020600101548710610a6c576040516304e524b560e41b81523090634e524b5090610a1d908c908c908a908d906004016131e6565b6020604051808303816000875af1158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906137bc565b95505050505050610e1b565b8251604080518a8152602081018a905233926001600160a01b0390811692908d16917f36d6fe2f8514bad704749bcc0910b552f83180da8b6690b8a953fc2086d9a9c1910160405180910390a46000610a60565b604080516080810182526001600160a01b038087168252602082018990528a1681830152606081018990529051600290610afb90869061374f565b908152604080516020928190038301812080546001808201835560009283528583208751600493840290910180546001600160a01b03199081166001600160a01b039384161782558989018051838601558a890180516002808601805486169288169290921790915560608d018051600396870155338a52888d529a892080548089018255908a529b89208d519c909802909701805484169b86169b909b178b559051948a01949094559251938801805490931693909116929092179055925193830193909355909190600790610bd390889061374f565b9081526040805160209281900383019020546001600160a01b03908116845283830194909452918201600090812080546001808201835591835291839020865160049093020180546001600160a01b0319908116938716939093178155928601518382015585840151600280850180549094169190961617909155606085015160039092019190915581516080810192839052928392610c7490899061374f565b90815260405190819003602001902054610c8e91906137d5565b8152602001600160036000600789604051610ca9919061374f565b9081526040805160209281900383019020546001600160a01b03168352908201929092520160002054610cdc91906137d5565b815233600090815260046020908152604090912054910190610d00906001906137d5565b815260016020918201526001600160a01b038716600090815260059091526040908190209051610d3190879061374f565b9081526040805160209281900383018120845181559284015160018401559083015160028301556060909201516003909101805460ff1916911515919091179055600790610d8090869061374f565b9081526020016040518091039020600101548710610dc45760208101516040516304e524b560e41b81523091634e524b5091610a1d918d918d918b916004016131e6565b8251604080518a8152602081018a905233926001600160a01b0390811692908d16917f36d6fe2f8514bad704749bcc0910b552f83180da8b6690b8a953fc2086d9a9c1910160405180910390a46000955050505050505b9392505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610e975750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610eb6906001600160601b0316876137e8565b610ec09190613815565b915196919550909350505050565b60046020528160005260406000208181548110610eea57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b03928316955090935091169084565b60606000610f3086866123dd565b90506000600282604051610f44919061374f565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610fd4576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154858701526002830154909116928401929092526003015460608301529083529092019101610f72565b505050509050610fe5818686612636565b979650505050505050565b6008546001600160a01b0316331461101a5760405162461bcd60e51b81526004016105f690613829565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60008061104986866123dd565b905060078160405161105b919061374f565b90815260405190819003602001902054336001600160a01b03909116148061108257503330145b61109e5760405162461bcd60e51b81526004016105f690613859565b6007816040516110ae919061374f565b9081526040519081900360200190206004015460ff166111015760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1a5cdd195960921b60448201526064016105f6565b600061110d87876123e9565b60208101519091506001600160a01b031630146111815760405162461bcd60e51b815260206004820152602c60248201527f436f6e747261637420646f65736e2774206861766520616c6c6f77616e63652060448201526b199bdc881d1a1a5cc813919560a21b60648201526084016105f6565b6001600160a01b0385166000908152600560205260409081902090516111a890849061374f565b9081526040519081900360200190206003015460ff166112165760405162461bcd60e51b815260206004820152602360248201527f427579657220646f65736e277420686176652062696420666f7220746869732060448201526213919560ea1b60648201526084016105f6565b83600283604051611227919061374f565b908152602001604051809103902060056000886001600160a01b03166001600160a01b0316815260200190815260200160002084604051611268919061374f565b9081526040519081900360200190205481548110611288576112886137a6565b9060005260206000209060040201600101541461130d5760405162461bcd60e51b815260206004820152603760248201527f54686973206275796572206469646e277420737567676573742074686174207060448201527f726963652076616c756520666f722074686973204e465400000000000000000060648201526084016105f6565b6001600160a01b03851660009081526006602052604090205484111561138c5760405162461bcd60e51b815260206004820152602e60248201527f427579657220646f65736e2774206861766520656e6f7567682053504873206960448201526d1b881d1a194818dbdb9d1c9858dd60921b60648201526084016105f6565b600b548490156114a15760006103e8600b546113a89190613815565b6113b290836137e8565b600a549091506001600160a01b03166114195760405162461bcd60e51b815260206004820152602360248201527f54726561737572792077616c6c65742061646472657373206e6f7420736574206044820152623ab81760e91b60648201526084016105f6565b600954600a5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af115801561146e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611492919061375b565b5061149d81836137d5565b9150505b60405163152a902d60e11b8152600481018890526024810182905260009081906001600160a01b038b1690632a55205a906044016040805180830381865afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151591906138a1565b60095460405163a9059cbb60e01b81526001600160a01b03808516600483015260248201849052939550919350919091169063a9059cbb906044016020604051808303816000875af115801561156f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611593919061375b565b5061159e81846137d5565b92506115d3886007876040516115b4919061374f565b908152604051908190036020019020546001600160a01b031685612505565b896001600160a01b03166342842e0e6007876040516115f2919061374f565b908152604051908190036020018120546001600160e01b031960e084901b1682526001600160a01b0390811660048301528b166024820152604481018c9052606401600060405180830381600087803b15801561164e57600080fd5b505af1158015611662573d6000803e3d6000fd5b50505050611670858961284f565b876001600160a01b031660078660405161168a919061374f565b9081526040805160209281900383018120548d82529281018b90526001600160a01b03928316928e16917f6e7a4c46395b56b7d97ccc3926f0db0dac3c760b187854dd2497e50c4dc82d62910160405180910390a460006007866040516116f1919061374f565b908152604051908190036020018120600401805492151560ff1990931692909217909155889060079061172590889061374f565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905560009a9950505050505050505050565b6008546001600160a01b0316331461178e5760405162461bcd60e51b81526004016105f690613829565b600b55565b6008546001600160a01b031633146117bd5760405162461bcd60e51b81526004016105f690613829565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000806117ec84846123dd565b905060006117fa85856123e9565b80519091506001600160a01b031633148061181f57506008546001600160a01b031633145b61183b5760405162461bcd60e51b81526004016105f690613859565b61184682600061284f565b6000600783604051611858919061374f565b908152602001604051809103902060040160006101000a81548160ff02191690831515021790555080600001516001600160a01b031684866001600160a01b03167f80a72ae9592e395c65a589d23febcc7bef05213af5110bf6e547949373c815036007866040516118ca919061374f565b908152604051602091819003820181206001015481520160405180910390a4506000949350505050565b6001600160a01b0383166000908152600360209081526040808320805482518185028101850190935280835260609493849084015b8282101561198b576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154858701526002830154909116928401929092526003015460608301529083529092019101611929565b50505050905061199c818585612636565b95945050505050565b6000806119b285856123dd565b9050336001600160a01b03841614806119d557506008546001600160a01b031633145b611a345760405162461bcd60e51b815260206004820152602a60248201527f596f752068617665206e6f207065726d697373696f6e7320666f72207468697360448201526910333ab731ba34b7b71760b11b60648201526084016105f6565b6001600160a01b038316600090815260056020526040908190209051611a5b90839061374f565b9081526040519081900360200190206003015460ff16611abd5760405162461bcd60e51b815260206004820152601d60248201527f596f752068617665206e6f206269647320666f722074686973204e465400000060448201526064016105f6565b6001600160a01b0383166000908152600560205260408082209051611ae390849061374f565b908152604051908190036020018120549150600090600290611b0690859061374f565b90815260200160405180910390208281548110611b2557611b256137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0390811684526001820154948401949094526002808201549094168383015260030154606083015251909250611b8290859061374f565b90815260200160405180910390208281548110611ba157611ba16137a6565b60009182526020808320600160049093020191909101546001600160a01b038816835260069091526040909120541015611c3c5760405162461bcd60e51b815260206004820152603660248201527f596f752068617665206e6f20656e6f756768206d6f6e657920696e207468652060448201527518dbdb9d1c9858dd081d1bc819195b195d1948189a5960521b60648201526084016105f6565b336001600160a01b031686886001600160a01b03167f14db41ce7a73af30b2195ae2a1cdfe6165695f7af0d286d97da60d47b75318258460200151604051611c8691815260200190565b60405180910390a4611c9d85868360200151612505565b611cab83826000015161296e565b6000979650505050505050565b81516020818401810180516002825292820191850191909120919052805482908110610eea57600080fd5b6000808451118015611cf6575060008351115b8015611d03575060008251115b611d5a5760405162461bcd60e51b815260206004820152602260248201527f4172726179206c656e6774682073686f756c64206265206d6f7265207468616e604482015261020360f41b60648201526084016105f6565b82518451148015611d6c575081518451145b611db15760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b60448201526064016105f6565b60005b84518110156121dd576000858281518110611dd157611dd16137a6565b602002602001015190506000858381518110611def57611def6137a6565b602002602001015190506000858481518110611e0d57611e0d6137a6565b602002602001015190506000611e2384846123e9565b60208101519091506001600160a01b03163014611e9d5760405162461bcd60e51b815260206004820152603260248201527f54686520436f6e747261637420646f65736e2774206861766520616c6c6f77616044820152713731b2903337b9103a3434b9903a37b5b2b760711b60648201526084016105f6565b80516001600160a01b03163314611ec65760405162461bcd60e51b81526004016105f690613859565b6000611ed285856123dd565b9050600781604051611ee4919061374f565b9081526040519081900360200190206004015460ff168015611f3b575081600001516001600160a01b0316600782604051611f1f919061374f565b908152604051908190036020019020546001600160a01b031614155b15611f4b57611f4b81600061284f565b6040805160a08101825283516001600160a01b0390811682526020820186905287168183015260608101869052600160808201529051600790611f8f90849061374f565b9081526040805160209281900383018120845181546001600160a01b03199081166001600160a01b039283161783558686015160018401559386015160028301805490951690821617909355606085015160038201556080909401516004909401805460ff19169415159490941790935585835233928792918916917fe065949781be696d3f91077ee93178e3eb0472a4e60456f00a1161fde5735832910160405180910390a461203e6130e7565b60005b600283604051612051919061374f565b9081526040519081900360200190205481101561214657600060028460405161207a919061374f565b90815260200160405180910390208281548110612099576120996137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015494840194909452600281015490931682820152600390920154606082015290519091506007906120fb90869061374f565b908152602001604051809103902060010154816020015110158015612127575082602001518160200151115b15612133579150612146565b508061213e816138cf565b915050612041565b506020810151156121c457805160208201516040516304e524b560e41b81523092634e524b509261217f928b928b9290916004016131e6565b6020604051808303816000875af115801561219e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c291906137bc565b505b50505050505080806121d5906138cf565b915050611db4565b506000949350505050565b6001600160a01b038316600090815260046020908152604080832080548251818502810185019093528083526060949384908401821561198b576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154858701526002830154909116928401929092526003015460608301529083529092019101611929565b6122846130e7565b600061229085856123dd565b604080516080810182526001600160a01b0380871680835260006020808501829052928b1684860152606084018a90529081526005909152828120925193945090929091906122e090859061374f565b908152604080519182900360209081018320608084018352805484526001810154918401919091526002810154918301919091526003015460ff1615156060820181905290915061233557509150610e1b9050565b600283604051612345919061374f565b908152604051908190036020019020815181548110612366576123666137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015494840194909452600281015490931690820152600390910154606082015293505050509392505050565b60036020528160005260406000208181548110610eea57600080fd5b6060610e1b8383612da7565b604080518082019091526000808252602082015260408051808201918290526331a9108f60e11b909152604481018390528390600090806001600160a01b038416636352211e60648301602060405180830381865afa158015612450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247491906138e8565b6001600160a01b03168152602001836001600160a01b031663081812fc876040518263ffffffff1660e01b81526004016124b091815260200190565b602060405180830381865afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f191906138e8565b6001600160a01b0316905295945050505050565b6001600160a01b03831660009081526006602052604090205481111561257b5760405162461bcd60e51b815260206004820152602560248201527f4e6f7420656e6f75676820757365722073706873206f6e2074686520636f6e74604482015264726163742160d81b60648201526084016105f6565b60095460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156125ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f2919061375b565b506001600160a01b0383163014612631576001600160a01b0383166000908152600660205260408120805483929061262b9084906137d5565b90915550505b505050565b60608351600003612648575082610e1b565b6000826001600160401b0316116126a15760405162461bcd60e51b815260206004820152601f60248201527f7061676553697a65206d7573742062652067726561746572207468616e20300060448201526064016105f6565b6000836001600160401b0316116126fa5760405162461bcd60e51b815260206004820152601b60248201527f706167696e6174696f6e206973207374617274696e672061742031000000000060448201526064016105f6565b600082612708600186613905565b612712919061392c565b6001600160401b03169050845181106127625760405162461bcd60e51b815260206004820152601260248201527150616765206f7574206f6620626f756e647360701b60448201526064016105f6565b60006127776001600160401b03851683613793565b90508551811115612786575084515b600061279283836137d5565b6001600160401b038111156127a9576127a96133fa565b6040519080825280602002602001820160405280156127e257816020015b6127cf6130e7565b8152602001906001900390816127c75790505b509050825b8281101561284457878181518110612801576128016137a6565b602002602001015182858361281691906137d5565b81518110612826576128266137a6565b6020026020010181905250808061283c906138cf565b9150506127e7565b509695505050505050565b60006001600284604051612863919061374f565b9081526040519081900360200190205461287d9190613957565b90505b60008112612631576000819050600060028560405161289f919061374f565b908152602001604051809103902082815481106128be576128be6137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03908116808552600183015495850195909552600282015481169284019290925260030154606083015290925085161461292b578051602082015161292b91908190612505565b61293985826000015161296e565b600160028660405161294b919061374f565b908152604051908190036020019020546129659190613957565b92505050612880565b6000600783604051612980919061374f565b908152604080519182900360209081018320546001600160a01b03868116600090815260059093529290912091169250906129bc90859061374f565b9081526040519081900360200190206003015460ff16612a2a5760405162461bcd60e51b8152602060048201526024808201527f5468657265206973206e6f206269642c20796f752063616e27742072656d6f7660448201526319481a5d60e21b60648201526084016105f6565b6001600160a01b0382166000908152600560205260408082209051612a5090869061374f565b908152604080519182900360209081018320608084018352805484526001810154918401919091526002810154918301919091526003015460ff1615156060820152905060005b60038160ff161015612d57576000808260ff16600003612add57600287604051612ac1919061374f565b9081526020016040518091039020915083600001519050612b2f565b8260ff16600103612b0d5750506001600160a01b0384166000908152600460205260409081902090830151612b2f565b50506001600160a01b0383166000908152600360209081526040909120908301515b8154600090612b40906001906137d5565b90506000838281548110612b5657612b566137a6565b600091825260209182902060408051608081018252600490930290910180546001600160a01b039081168452600182015494840194909452600281015490931690820152600390910154606082015284549091508190859085908110612bbe57612bbe6137a6565b6000918252602091829020835160049092020180546001600160a01b039283166001600160a01b031991821617825592840151600182015560408401516002820180549190931693169290921790556060909101516003909101558354849080612c2a57612c2a613977565b60008281526020812060046000199093019283020180546001600160a01b03199081168255600182018390556002820180549091169055600301819055915560ff86169003612cb35780516001600160a01b0316600090815260056020526040908190209051849190612c9e908c9061374f565b90815260405190819003602001902055612d40565b8460ff16600103612d015780516001600160a01b0316600090815260056020526040908190209051849190612ce9908c9061374f565b90815260405190819003602001902060020155612d40565b80516001600160a01b0316600090815260056020526040908190209051849190612d2c908c9061374f565b908152604051908190036020019020600101555b505050508080612d4f9061398d565b915050612a97565b506001600160a01b0383166000908152600560205260408082209051612d7e90879061374f565b908152604051908190036020019020600301805491151560ff1990921691909117905550505050565b60606000612db484612def565b90506000612dc184612fda565b90508181604051602001612dd69291906139ac565b6040516020818303038152906040529250505092915050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a80825260608281019094526001600160a01b0385169291600091602082018180368337019050509050600360fc1b81600081518110612e5a57612e5a6137a6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e8957612e896137a6565b60200101906001600160f81b031916908160001a90535060005b6014811015612fd15782600485612ebb84600c613793565b60208110612ecb57612ecb6137a6565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110612ef157612ef16137a6565b01602001516001600160f81b03191682612f0c8360026137e8565b612f17906002613793565b81518110612f2757612f276137a6565b60200101906001600160f81b031916908160001a9053508284612f4b83600c613793565b60208110612f5b57612f5b6137a6565b825191901a600f16908110612f7257612f726137a6565b01602001516001600160f81b03191682612f8d8360026137e8565b612f98906003613793565b81518110612fa857612fa86137a6565b60200101906001600160f81b031916908160001a90535080612fc9816138cf565b915050612ea3565b50949350505050565b6060816000036130015750506040805180820190915260018152600360fc1b602082015290565b816000815b801561302c5781613016816138cf565b92506130259050600a82613815565b9050613006565b6000826001600160401b03811115613046576130466133fa565b6040519080825280601f01601f191660200182016040528015613070576020820181803683370190505b509050825b84156130dd5780613085816139cc565b91506130949050600a866139e3565b61309f906030613793565b60f81b8282815181106130b4576130b46137a6565b60200101906001600160f81b031916908160001a9053506130d6600a86613815565b9450613075565b5095945050505050565b604051806080016040528060006001600160a01b031681526020016000815260200160006001600160a01b03168152602001600081525090565b60006020828403121561313357600080fd5b81356001600160e01b031981168114610e1b57600080fd5b6001600160a01b038116811461316057600080fd5b50565b60008060006060848603121561317857600080fd5b83356131838161314b565b95602085013595506040909401359392505050565b600080604083850312156131ab57600080fd5b50508035926020909101359150565b600080604083850312156131cd57600080fd5b82356131d88161314b565b946020939093013593505050565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b80356001600160401b038116811461322757600080fd5b919050565b6000806000806080858703121561324257600080fd5b843561324d8161314b565b93506020850135925061326260408601613210565b915061327060608601613210565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b818110156132e9576132d683855180516001600160a01b0390811683526020808301519084015260408083015190911690830152606090810151910152565b9284019260809290920191600101613297565b50909695505050505050565b60006020828403121561330757600080fd5b8135610e1b8161314b565b6000806000806080858703121561332857600080fd5b84356133338161314b565b935060208501359250604085013561334a8161314b565b9396929550929360600135925050565b60006020828403121561336c57600080fd5b5035919050565b60008060006060848603121561338857600080fd5b83356133938161314b565b92506133a160208501613210565b91506133af60408501613210565b90509250925092565b6000806000606084860312156133cd57600080fd5b83356133d88161314b565b92506020840135915060408401356133ef8161314b565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613438576134386133fa565b604052919050565b600082601f83011261345157600080fd5b81356001600160401b0381111561346a5761346a6133fa565b61347d601f8201601f1916602001613410565b81815284602083860101111561349257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156134c157600080fd5b81356001600160401b038111156134d757600080fd5b6134e384828501613440565b949350505050565b600080604083850312156134fe57600080fd5b82356001600160401b0381111561351457600080fd5b61352085828601613440565b95602094909401359450505050565b60006001600160401b03821115613548576135486133fa565b5060051b60200190565b600082601f83011261356357600080fd5b813560206135786135738361352f565b613410565b82815260059290921b8401810191818101908684111561359757600080fd5b8286015b84811015612844578035835291830191830161359b565b6000806000606084860312156135c757600080fd5b83356001600160401b03808211156135de57600080fd5b818601915086601f8301126135f257600080fd5b813560206136026135738361352f565b82815260059290921b8401810191818101908a84111561362157600080fd5b948201945b838610156136485785356136398161314b565b82529482019490820190613626565b9750508701359250508082111561365e57600080fd5b61366a87838801613552565b9350604086013591508082111561368057600080fd5b5061368d86828701613552565b9150509250925092565b81516001600160a01b03908116825260208084015190830152604080840151909116908201526060808301519082015260808101610581565b600080604083850312156136e357600080fd5b82356136ee8161314b565b915060208301356001600160401b0381111561370957600080fd5b61371585828601613440565b9150509250929050565b6000815160005b818110156137405760208185018101518683015201613726565b50600093019283525090919050565b6000610e1b828461371f565b60006020828403121561376d57600080fd5b81518015158114610e1b57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105815761058161377d565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156137ce57600080fd5b5051919050565b818103818111156105815761058161377d565b80820281158282048414176105815761058161377d565b634e487b7160e01b600052601260045260246000fd5b600082613824576138246137ff565b500490565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b60208082526028908201527f596f752068617665206e6f207065726d697373696f6e20666f72207468697320604082015267333ab731ba34b7b760c11b606082015260800190565b600080604083850312156138b457600080fd5b82516138bf8161314b565b6020939093015192949293505050565b6000600182016138e1576138e161377d565b5060010190565b6000602082840312156138fa57600080fd5b8151610e1b8161314b565b6001600160401b038281168282160390808211156139255761392561377d565b5092915050565b6001600160401b0381811683821602808216919082811461394f5761394f61377d565b505092915050565b81810360008312801583831316838312821617156139255761392561377d565b634e487b7160e01b600052603160045260246000fd5b600060ff821660ff81036139a3576139a361377d565b60010192915050565b60006139b8828561371f565b602f60f81b815261199c600182018561371f565b6000816139db576139db61377d565b506000190190565b6000826139f2576139f26137ff565b50069056fea2646970667358221220c0b957b1cafa70710aadebb3cc8b0cb9ac872b6190ff643b6dbe3bf734ab592c64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1972,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1969_storage"
      },
      {
        "astId": 1977,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1969_storage)"
      },
      {
        "astId": 7927,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "tokenBids",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(Bid)7893_storage)dyn_storage)"
      },
      {
        "astId": 7933,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "receivedBids",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(Bid)7893_storage)dyn_storage)"
      },
      {
        "astId": 7939,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "sentBids",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(Bid)7893_storage)dyn_storage)"
      },
      {
        "astId": 7946,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "buyersBidsIndexes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(BidIndexes)7902_storage))"
      },
      {
        "astId": 7951,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "buyersTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(BuyerTokens)7905_storage)"
      },
      {
        "astId": 7956,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "nfts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_struct(NFT)7916_storage)"
      },
      {
        "astId": 7958,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "contractOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7961,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "spheraTokenAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)796"
      },
      {
        "astId": 7963,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "treasuryWalletAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7966,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "taxFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bid)7893_storage)dyn_storage": {
        "base": "t_struct(Bid)7893_storage",
        "encoding": "dynamic_array",
        "label": "struct NFTMarketplace.Bid[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)796": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Bid)7893_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NFTMarketplace.Bid[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bid)7893_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(BidIndexes)7902_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct NFTMarketplace.BidIndexes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(BidIndexes)7902_storage)"
      },
      "t_mapping(t_address,t_struct(BuyerTokens)7905_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NFTMarketplace.BuyerTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(BuyerTokens)7905_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(Bid)7893_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct NFTMarketplace.Bid[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bid)7893_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(BidIndexes)7902_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct NFTMarketplace.BidIndexes)",
        "numberOfBytes": "32",
        "value": "t_struct(BidIndexes)7902_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(NFT)7916_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct NFTMarketplace.NFT)",
        "numberOfBytes": "32",
        "value": "t_struct(NFT)7916_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1969_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1969_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)7893_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.Bid",
        "members": [
          {
            "astId": 7886,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 7888,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7890,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7892,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "serialNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BidIndexes)7902_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.BidIndexes",
        "members": [
          {
            "astId": 7895,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7897,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "receivedIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7899,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "sentIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7901,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "isSet",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BuyerTokens)7905_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.BuyerTokens",
        "members": [
          {
            "astId": 7904,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "sphs",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NFT)7916_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.NFT",
        "members": [
          {
            "astId": 7907,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 7909,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7911,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7913,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "serialNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7915,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "isListed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoyaltyInfo)1969_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1966,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1968,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}